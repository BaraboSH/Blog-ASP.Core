{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Nikita\\\\Desktop\\\\Blog ASP.Core\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\Users\\\\Nikita\\\\Desktop\\\\Blog ASP.Core\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\Nikita\\\\Desktop\\\\Blog ASP.Core\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { combineReducers, createStore } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\nimport navigation from './navigation';\nimport auth from './auth';\nimport cache from './cache';\nimport navbar from './navbar';\nimport { unauthorizeUser } from '../actions/auth';\nimport { receiveMockState } from '../actions/mock';\n\nvar form = function form() {\n  return formReducer;\n};\n\nvar getNewReducer = function getNewReducer(_) {\n  return combineReducers(Object.entries({\n    navigation: navigation,\n    auth: auth,\n    cache: cache,\n    form: form,\n    navbar: navbar\n  }).reduce(function (acc, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    return _objectSpread({}, acc, _defineProperty({}, key, value()));\n  }, {}));\n};\n\nvar reducer = getNewReducer();\nexport default (function (state, action) {\n  if (action.type === unauthorizeUser.getType()) {\n    return reducer(createStore(getNewReducer()).getState());\n  }\n\n  if (action.type === receiveMockState.getType()) {\n    return reducer(action.payload);\n  }\n\n  return reducer(state, action);\n});","map":{"version":3,"sources":["C:\\Users\\Nikita\\Desktop\\Blog ASP.Core\\front-end\\src\\reducers\\index.js"],"names":["combineReducers","createStore","reducer","formReducer","navigation","auth","cache","navbar","unauthorizeUser","receiveMockState","form","getNewReducer","_","Object","entries","reduce","acc","key","value","state","action","type","getType","getState","payload"],"mappings":";;;AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAASC,OAAO,IAAIC,WAApB,QAAuC,YAAvC;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,SAASC,eAAT,QAAgC,iBAAhC;AACA,SAASC,gBAAT,QAAiC,iBAAjC;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO;AAAA,SAAMP,WAAN;AAAA,CAAb;;AAEA,IAAMQ,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,CAAC;AAAA,SACrBZ,eAAe,CACba,MAAM,CAACC,OAAP,CAAe;AACbV,IAAAA,UAAU,EAAVA,UADa;AAEbC,IAAAA,IAAI,EAAJA,IAFa;AAGbC,IAAAA,KAAK,EAALA,KAHa;AAIbI,IAAAA,IAAI,EAAJA,IAJa;AAKbH,IAAAA,MAAM,EAANA;AALa,GAAf,EAMGQ,MANH,CAOE,UAACC,GAAD;AAAA;AAAA,QAAOC,GAAP;AAAA,QAAYC,KAAZ;;AAAA,6BACKF,GADL,sBAEGC,GAFH,EAESC,KAAK,EAFd;AAAA,GAPF,EAWE,EAXF,CADa,CADM;AAAA,CAAvB;;AAiBA,IAAMhB,OAAO,GAAGS,aAAa,EAA7B;AAEA,gBAAe,UAACQ,KAAD,EAAQC,MAAR,EAAmB;AAChC,MAAIA,MAAM,CAACC,IAAP,KAAgBb,eAAe,CAACc,OAAhB,EAApB,EAA+C;AAC7C,WAAOpB,OAAO,CAACD,WAAW,CAACU,aAAa,EAAd,CAAX,CAA6BY,QAA7B,EAAD,CAAd;AACD;;AAED,MAAIH,MAAM,CAACC,IAAP,KAAgBZ,gBAAgB,CAACa,OAAjB,EAApB,EAAgD;AAC9C,WAAOpB,OAAO,CAACkB,MAAM,CAACI,OAAR,CAAd;AACD;;AAED,SAAOtB,OAAO,CAACiB,KAAD,EAAQC,MAAR,CAAd;AACD,CAVD","sourcesContent":["import { combineReducers, createStore } from 'redux'\r\nimport { reducer as formReducer } from 'redux-form'\r\n\r\nimport navigation from './navigation'\r\nimport auth from './auth'\r\nimport cache from './cache'\r\nimport navbar from './navbar'\r\n\r\nimport { unauthorizeUser } from '../actions/auth'\r\nimport { receiveMockState } from '../actions/mock'\r\n\r\nconst form = () => formReducer\r\n\r\nconst getNewReducer = _ =>\r\n  combineReducers(\r\n    Object.entries({\r\n      navigation,\r\n      auth,\r\n      cache,\r\n      form,\r\n      navbar,\r\n    }).reduce(\r\n      (acc, [key, value]) => ({\r\n        ...acc,\r\n        [key]: value()\r\n      }),\r\n      {}\r\n    )\r\n  )\r\n\r\nconst reducer = getNewReducer()\r\n\r\nexport default (state, action) => {\r\n  if (action.type === unauthorizeUser.getType()) {\r\n    return reducer(createStore(getNewReducer()).getState())\r\n  }\r\n\r\n  if (action.type === receiveMockState.getType()) {\r\n    return reducer(action.payload)\r\n  }\r\n\r\n  return reducer(state, action)\r\n}"]},"metadata":{},"sourceType":"module"}