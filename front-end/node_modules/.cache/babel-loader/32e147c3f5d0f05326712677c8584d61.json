{"ast":null,"code":"export var takeIfExists = function takeIfExists(key) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : String;\n  var item = localStorage.getItem(key);\n\n  if (item) {\n    return type === Number ? Number.parseFloat(item) : type === Object ? JSON.parse(item) : item;\n  }\n};","map":{"version":3,"sources":["C:\\Users\\Nikita\\Desktop\\Blog ASP.Core\\front-end\\src\\utils\\localStorage.js"],"names":["takeIfExists","key","type","String","item","localStorage","getItem","Number","parseFloat","Object","JSON","parse"],"mappings":"AAAA,OAAO,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAwB;AAAA,MAAlBC,IAAkB,uEAAXC,MAAW;AAChD,MAAMC,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqBL,GAArB,CAAb;;AACA,MAAGG,IAAH,EAAS;AACL,WAAOF,IAAI,KAAKK,MAAT,GACDA,MAAM,CAACC,UAAP,CAAkBJ,IAAlB,CADC,GAEDF,IAAI,KAAKO,MAAT,GAAkBC,IAAI,CAACC,KAAL,CAAWP,IAAX,CAAlB,GAAqCA,IAF3C;AAGH;AACJ,CAPM","sourcesContent":["export const takeIfExists = (key, type = String) => {\r\n    const item = localStorage.getItem(key)\r\n    if(item) {\r\n        return type === Number\r\n            ? Number.parseFloat(item)\r\n            : type === Object ? JSON.parse(item) : item\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}