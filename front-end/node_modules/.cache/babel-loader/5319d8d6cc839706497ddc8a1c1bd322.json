{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Nikita\\\\Desktop\\\\Blog ASP.Core\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport { put, call } from 'redux-saga/effects';\nimport { SubmissionError } from 'redux-form';\nimport { to } from '../actions/navigation';\nimport { receiveAuthData } from '../actions/auth';\nimport { LOGIN, REGISTER } from '../constants/api';\nimport { post } from '../utils/api';\nimport { startApp } from '../actions/generic';\n\nvar authSaga = function authSaga(url, thanGoTo) {\n  return (\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(_ref) {\n      var _ref$payload, values, reject, authData, status, message;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _ref$payload = _ref.payload, values = _ref$payload.values, reject = _ref$payload.reject;\n              _context.prev = 1;\n              _context.next = 4;\n              return call(post, url, values);\n\n            case 4:\n              authData = _context.sent;\n              _context.next = 7;\n              return put(receiveAuthData(authData));\n\n            case 7:\n              _context.next = 9;\n              return put(startApp());\n\n            case 9:\n              _context.next = 11;\n              return put(to(thanGoTo));\n\n            case 11:\n              _context.next = 19;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](1);\n              status = _context.t0.status;\n              message = _context.t0.message;\n              _context.next = 19;\n              return call(reject, new SubmissionError(message));\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 13]]);\n    })\n  );\n};\n\nexport var submitLogin = authSaga(LOGIN, 'start');\nexport var submitRegister = authSaga(REGISTER, 'start');","map":{"version":3,"sources":["C:\\Users\\Nikita\\Desktop\\Blog ASP.Core\\front-end\\src\\sagas\\auth.js"],"names":["put","call","SubmissionError","to","receiveAuthData","LOGIN","REGISTER","post","startApp","authSaga","url","thanGoTo","payload","values","reject","authData","status","message","submitLogin","submitRegister"],"mappings":";AAAA,SAASA,GAAT,EAAcC,IAAd,QAA0B,oBAA1B;AACA,SAASC,eAAT,QAAgC,YAAhC;AAEA,SAASC,EAAT,QAAmB,uBAAnB;AACA,SAAQC,eAAR,QAA8B,iBAA9B;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,QAAT,QAAyB,oBAAzB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAAMC,QAAN;AAAA;AAAA;AAAA,6BACb;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAWC,OAAX,EAAoBC,MAApB,gBAAoBA,MAApB,EAA4BC,MAA5B,gBAA4BA,MAA5B;AAAA;AAAA;AAEyB,qBAAMb,IAAI,CAACM,IAAD,EAAOG,GAAP,EAAYG,MAAZ,CAAV;;AAFzB;AAEcE,cAAAA,QAFd;AAAA;AAGQ,qBAAMf,GAAG,CAACI,eAAe,CAACW,QAAD,CAAhB,CAAT;;AAHR;AAAA;AAIQ,qBAAMf,GAAG,CAACQ,QAAQ,EAAT,CAAT;;AAJR;AAAA;AAKQ,qBAAMR,GAAG,CAACG,EAAE,CAACQ,QAAD,CAAH,CAAT;;AALR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAMeK,cAAAA,MANf,eAMeA,MANf;AAMuBC,cAAAA,OANvB,eAMuBA,OANvB;AAAA;AAOQ,qBAAMhB,IAAI,CAACa,MAAD,EAAS,IAAIZ,eAAJ,CAAoBe,OAApB,CAAT,CAAV;;AAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADa;AAAA;AAAA,CAAjB;;AAYA,OAAO,IAAMC,WAAW,GAAGT,QAAQ,CAACJ,KAAD,EAAQ,OAAR,CAA5B;AACP,OAAO,IAAMc,cAAc,GAAGV,QAAQ,CAACH,QAAD,EAAU,OAAV,CAA/B","sourcesContent":["import { put, call } from 'redux-saga/effects'\r\nimport { SubmissionError } from 'redux-form'\r\n\r\nimport { to } from '../actions/navigation'\r\nimport {receiveAuthData} from '../actions/auth'\r\nimport { LOGIN, REGISTER } from '../constants/api'\r\nimport { post } from '../utils/api'\r\nimport { startApp } from '../actions/generic'\r\n\r\nconst authSaga = (url, thanGoTo) =>\r\n    function*({payload:{values, reject}}) {\r\n        try {\r\n            const authData = yield call(post, url, values)\r\n            yield put(receiveAuthData(authData))\r\n            yield put(startApp())\r\n            yield put(to(thanGoTo))\r\n        } catch ({ status, message }) {\r\n            yield call(reject, new SubmissionError(message))\r\n        }\r\n    }\r\n\r\nexport const submitLogin = authSaga(LOGIN, 'start')\r\nexport const submitRegister = authSaga(REGISTER,'start')"]},"metadata":{},"sourceType":"module"}