{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Nikita\\\\Desktop\\\\Blog ASP.Core\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\Users\\\\Nikita\\\\Desktop\\\\Blog ASP.Core\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\Nikita\\\\Desktop\\\\Blog ASP.Core\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Nikita\\\\Desktop\\\\Blog ASP.Core\\\\front-end\\\\src\\\\App.js\";\nimport React from 'react';\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport saga from \"./sagas\";\nimport Root from \"./layouts/main\";\nimport { sagaMiddleware } from \"./middleware\";\nimport { receiveMockState } from \"./actions/mock\";\nimport { loggedIn } from \"./utils/auth\";\nimport { startApp } from \"./actions/generic\";\n\nvar App = function App() {\n  return React.createElement(Provider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(Root, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }));\n};\n\nexport default App;\nsagaMiddleware.run(saga);\nloggedIn() && store.dispatch(startApp());\n\nif (process.env.REACT_APP_MOCK) {\n  import('./mocks/state.js').then(function (module) {\n    var state = store.getState();\n    store.dispatch(receiveMockState(Object.entries(state).reduce(function (acc, _ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n\n      return _objectSpread({}, acc, _defineProperty({}, key, _objectSpread({}, value, module.MOCK_STATE[key])));\n    }, {})));\n  });\n}","map":{"version":3,"sources":["C:\\Users\\Nikita\\Desktop\\Blog ASP.Core\\front-end\\src\\App.js"],"names":["React","Provider","store","saga","Root","sagaMiddleware","receiveMockState","loggedIn","startApp","App","run","dispatch","process","env","REACT_APP_MOCK","then","module","state","getState","Object","entries","reduce","acc","key","value","MOCK_STATE"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,SAAQC,cAAR,QAA6B,cAA7B;AAEA,SAAQC,gBAAR,QAA+B,gBAA/B;AAEA,SAAQC,QAAR,QAAuB,cAAvB;AACA,SAAQC,QAAR,QAAuB,mBAAvB;;AAEA,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AACd,SACI,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEP,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CAND;;AAQA,eAAeO,GAAf;AAEAJ,cAAc,CAACK,GAAf,CAAmBP,IAAnB;AAEAI,QAAQ,MAAML,KAAK,CAACS,QAAN,CAAeH,QAAQ,EAAvB,CAAd;;AAEA,IAAGI,OAAO,CAACC,GAAR,CAAYC,cAAf,EAA+B;AAC3B,SAAO,kBAAP,EAA2BC,IAA3B,CAAgC,UAAAC,MAAM,EAAI;AACtC,QAAMC,KAAK,GAAGf,KAAK,CAACgB,QAAN,EAAd;AACAhB,IAAAA,KAAK,CAACS,QAAN,CACIL,gBAAgB,CACZa,MAAM,CAACC,OAAP,CAAeH,KAAf,EAAsBI,MAAtB,CACI,UAACC,GAAD;AAAA;AAAA,UAAMC,GAAN;AAAA,UAAUC,KAAV;;AAAA,+BACOF,GADP,sBAEKC,GAFL,oBAEcC,KAFd,EAEuBR,MAAM,CAACS,UAAP,CAAkBF,GAAlB,CAFvB;AAAA,KADJ,EAKI,EALJ,CADY,CADpB;AAWH,GAbD;AAcH","sourcesContent":["import React from 'react';\nimport { Provider } from \"react-redux\";\n\nimport store from \"./store\";\nimport saga from \"./sagas\";\nimport Root from \"./layouts/main\";\nimport {sagaMiddleware} from \"./middleware\";\n\nimport {receiveMockState} from \"./actions/mock\";\n\nimport {loggedIn} from \"./utils/auth\";\nimport {startApp} from \"./actions/generic\";\n\nconst App = () => {\n    return (\n        <Provider store={store}>\n            <Root/>\n        </Provider>\n    )\n}\n\nexport default App\n\nsagaMiddleware.run(saga);\n\nloggedIn() && store.dispatch(startApp())\n\nif(process.env.REACT_APP_MOCK) {\n    import('./mocks/state.js').then(module => {\n        const state = store.getState()\n        store.dispatch(\n            receiveMockState(\n                Object.entries(state).reduce(\n                    (acc,[key,value]) => ({\n                        ...acc,\n                        [key]:{...value,...module.MOCK_STATE[key]}\n                    }),\n                    {}\n                )\n            )\n        )\n    })\n}\n"]},"metadata":{},"sourceType":"module"}