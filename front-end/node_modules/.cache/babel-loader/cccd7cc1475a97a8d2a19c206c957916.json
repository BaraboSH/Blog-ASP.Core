{"ast":null,"code":"import _ from 'lodash';\nimport { clone, setWith, curry } from 'lodash/fp';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nexport var connectTo = function connectTo(mapStateToProps, actions, Container) {\n  var mapDispatchToProps = function mapDispatchToProps(dispatch) {\n    return bindActionCreators(actions, dispatch);\n  };\n\n  return connect(mapStateToProps, mapDispatchToProps)(Container);\n};\nexport var callIf = function callIf(condition, func) {\n  return condition ? func : function (_) {\n    return null;\n  };\n};\nexport var getUniqueName = function getUniqueName(name, otherNames) {\n  var suffixes = otherNames.filter(function (n) {\n    return n.startsWith(name);\n  }).map(function (n) {\n    return n.slice(name.length);\n  });\n  if (!suffixes.includes('')) return name;\n  var number = 1;\n\n  while (number) {\n    var strNumber = number.toString();\n    if (!suffixes.includes(strNumber)) return name + strNumber;\n    number++;\n  }\n};\nexport var takeFromState = function takeFromState(state, stateObjectName, fields) {\n  return _.pick(state[stateObjectName], fields);\n};\nexport var setIn = curry(function (obj, path, value) {\n  return setWith(clone, path, value, clone(obj));\n});\nexport var firstUpperWords = function firstUpperWords(text, length) {\n  return text.split(' ').map(function (element) {\n    return element[0].toUpperCase();\n  }).splice(0, length);\n};\nexport var sliceWithDots = function sliceWithDots(text, length) {\n  return text.length > length ? text.slice(0, length) + '...' : text;\n};\nexport var pluralize = function pluralize(text, amount) {\n  return amount === 1 ? text : text + 's';\n};\nexport var pascalToText = function pascalToText(text) {\n  return _.capitalize(text.replace(/([A-Z][a-z])/g, ' $1').replace(/(\\d)/g, ' $1'));\n};\nexport var snakeToText = function snakeToText(text) {\n  return _.capitalize(text.split('_').join(' '));\n};\nexport var def = function def(v) {\n  return v !== undefined;\n};\nexport var logArgs = function logArgs(func) {\n  return function () {\n    var _console;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    (_console = console).info.apply(_console, [\"\".concat(func.name, \" args: \")].concat(args));\n\n    return func.apply(void 0, args);\n  };\n};","map":{"version":3,"sources":["C:\\Users\\Nikita\\Desktop\\Blog ASP.Core\\front-end\\src\\utils\\generic.js"],"names":["_","clone","setWith","curry","connect","bindActionCreators","connectTo","mapStateToProps","actions","Container","mapDispatchToProps","dispatch","callIf","condition","func","getUniqueName","name","otherNames","suffixes","filter","n","startsWith","map","slice","length","includes","number","strNumber","toString","takeFromState","state","stateObjectName","fields","pick","setIn","obj","path","value","firstUpperWords","text","split","element","toUpperCase","splice","sliceWithDots","pluralize","amount","pascalToText","capitalize","replace","snakeToText","join","def","v","undefined","logArgs","args","console","info"],"mappings":"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","sourcesContent":["import _ from 'lodash'\r\nimport { clone, setWith, curry } from 'lodash/fp'\r\n\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\n\r\nexport const connectTo = (mapStateToProps, actions, Container) => {\r\n  const mapDispatchToProps = dispatch => bindActionCreators(actions, dispatch)\r\n  return connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(Container)\r\n}\r\n\r\nexport const callIf = (condition, func) => (condition ? func : _ => null)\r\n\r\nexport const getUniqueName = (name, otherNames) => {\r\n  const suffixes = otherNames\r\n    .filter(n => n.startsWith(name))\r\n    .map(n => n.slice(name.length))\r\n  if (!suffixes.includes('')) return name\r\n\r\n  let number = 1\r\n  while (number) {\r\n    const strNumber = number.toString()\r\n    if (!suffixes.includes(strNumber)) return name + strNumber\r\n    number++\r\n  }\r\n}\r\n\r\nexport const takeFromState = (state, stateObjectName, fields) =>\r\n  _.pick(state[stateObjectName], fields)\r\n\r\nexport const setIn = curry((obj, path, value) =>\r\n  setWith(clone, path, value, clone(obj))\r\n)\r\n\r\nexport const firstUpperWords = (text, length) =>\r\n  text\r\n    .split(' ')\r\n    .map(element => element[0].toUpperCase())\r\n    .splice(0, length)\r\n\r\nexport const sliceWithDots = (text, length) => {\r\n  return text.length > length ? text.slice(0, length) + '...' : text\r\n}\r\n\r\nexport const pluralize = (text, amount) => {\r\n  return amount === 1 ? text : text + 's'\r\n}\r\n\r\nexport const pascalToText = text =>\r\n  _.capitalize(text.replace(/([A-Z][a-z])/g, ' $1').replace(/(\\d)/g, ' $1'))\r\n\r\nexport const snakeToText = text => _.capitalize(text.split('_').join(' '))\r\nexport const def = v => v !== undefined\r\n\r\nexport const logArgs = func => (...args) => {\r\n  console.info(`${func.name} args: `, ...args)\r\n  return func(...args)\r\n}"]},"metadata":{},"sourceType":"module"}